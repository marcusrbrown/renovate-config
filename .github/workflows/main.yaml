---
name: main

'on':
  push:
    branches: [main, 'renovate/**']
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run'
        default: true
        required: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup pnpm
        uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d # v3.0.0

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          cache: 'pnpm'
          node-version-file: '.node-version'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Check formatting
        run: pnpm run check-format

  release:
    env:
      DRY_RUN: true
    name: Release
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Get Wokrflow Application Token
        id: get-workflow-app-token
        uses: peter-murray/workflow-application-token-action@dc0413987a085fa17d19df9e47d4677cf81ffef3 # v3.0.0
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}
          permissions: 'contents:write, issues:write, pull_requests:write, workflows:write'

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.head_ref }}
          token: ${{ steps.get-workflow-app-token.outputs.token }}

      - name: Setup pnpm
        uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d # v3.0.0

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          cache: 'pnpm'
          node-version-file: '.node-version'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get Release Options
        env:
          INPUT_DRY_RUN: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run && 'true' || 'false' }}
          IS_DEFAULT_BRANCH: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
        run: |
          if [[ $INPUT_DRY_RUN != 'true' || $IS_DEFAULT_BRANCH == 'true'  ]]; then
            echo "DRY_RUN=false" >> $GITHUB_ENV
          fi

      - name: Semantic Release
        id: semantic-release
        env:
          GIT_AUTHOR_EMAIL: '137683033+mrbro-bot[bot]@users.noreply.github.com'
          GIT_AUTHOR_NAME: 'mrbro-bot[bot]'
          GIT_COMMITTER_EMAIL: '137683033+mrbro-bot[bot]@users.noreply.github.com'
          GIT_COMMITTER_NAME: 'mrbro-bot[bot]'
          GITHUB_TOKEN: ${{ steps.get-workflow-app-token.outputs.token }}
        run: |
          # The semantic-release config creates outputs to indicate whether a new release was published and if so, which version.
          pnpm exec semantic-release --dry-run ${{ env.DRY_RUN }} --ci ${{ env.DRY_RUN != 'true' }}

          # Create a release preview for pull requests
          # Use dry run workaround: https://github.com/semantic-release/semantic-release/issues/1890#issuecomment-974512960
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            unset GITHUB_ACTIONS && pnpm dlx semantic-release-github-pr --debug
          fi
        shell: 'bash -Eeuxo pipefail {0}'

      - name: Push Release Branch To Major Branch
        if: ${{ env.DRY_RUN != 'true' && steps.semantic-release.outputs.new-release-published == 'true' }}
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ steps.get-workflow-app-token.outputs.token }}
        run: |
          # Update the major branch reference to the new release tag
          version=${{ steps.semantic-release.outputs.new-release-version }}
          sha=$(gh api repos/{owner}/{repo}/git/ref/tags/v${version} | jq -r .object.sha)
          branch_name=v$(echo ${version} | cut -d . -f 1)
          if [ $(gh api repos/{owner}/{repo}/git/ref/heads/${branch_name}) ]; then
            gh api -X PATCH repos/{owner}/{repo}/git/refs/heads/${branch_name} -f sha=$sha -F force=true
          else
            gh api -X POST repos/{owner}/{repo}/git/refs -f ref=refs/heads/${branch_name} -f sha=$sha
          fi
        shell: 'bash -Eeuxo pipefail {0}'
